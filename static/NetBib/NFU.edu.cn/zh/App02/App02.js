importScripts("https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js");
//importScripts("https://cdn.jsdelivr.net/pyodide/v0.27.5/pyc/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  await self.pyodide.loadPackage("matplotlib");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.7.3-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.7.1/dist/wheels/panel-1.7.1-py3-none-any.whl', 'pyodide-http==0.2.1', 'numpy', 'pandas', 'param', 'requests', 'yaml']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\nthis_org01 = 'Nanfang Coll Guangzhou'\nlocale   = 'zh_Hans'\n_this_app_, _this_version_ = 'App02', '0.2.0'   # Which GUI_translation to use mainlyl\n_this_app_N_ = int(_this_app_[-2:])\ndebug=False\nfrom urllib.parse import urljoin\ninit_URL={'url_specs': {'base_url': '.', 'favicon': 'https://oxfordroadmap.github.io/vis/favicon.ico', 'logo': 'https://oxfordroadmap.github.io/vis/icon.svg', 'site_url': 'https://oxfordroadmap.github.io/vis/zh/index'}, 'url_data': {'data_tsv': 'https://oxfordroadmap.github.io/vis/NFU.edu.cn/assets/tb/App.tsv', 'locale_yml': 'https://oxfordroadmap.github.io/vis/NFU.edu.cn/assets/locale/Dt.yml'}}\n\n\nurls_remote = {k:  {'url':v, 'ext':f".{k.split('_')[1]}"} for k,v in init_URL['url_data'].items()}\n\nimport requests\nimport io\nimport pandas as pd\nimport yaml \n\nobjects = dict()\nfor stem, obj in urls_remote.items():\n    url, ext = obj['url'], obj['ext']\n    response = requests.get(url)\n    response.encoding = 'utf8'\n    if response.status_code == 200: \n        d = response.text\n        match ext:\n            case '.tsv':\n                df = pd.read_csv (io.StringIO(d), index_col=0, sep='\\t')\n                objects[stem] = df\n            case '.yml':\n                dt = yaml.safe_load(io.StringIO(d))\n                objects[stem] = dt           \n    else:\n        print(f"Failed to download file {url} {ext}. Status code: {response.status_code}")\n\ndf     = objects['data_tsv']\nDtrans = objects['locale_yml']   ##### \U0001f5e3 translation yaml datasets\n\n\nDtrans_content = { k:v for k, v in Dtrans.items() if k != '_meta_' and 'GUI' not in k}   ## columns_translation\nDtrans_meta = Dtrans['_meta_']                                        ## DataFrame meta and others\nDtrans_GUI  = Dtrans[f"GUI_{_this_app_}"] |  Dtrans[f"GUI_url_misc"]                                       ## GUI\n\nDtr_m = Dtrans_GUI | Dtrans_meta\ntr_m = {k:v[locale] for k,v in Dtr_m.items()}\n\nimport gettext ### Now Deferred translations \ndef N_(message, tr_d=tr_m): # def _(message): \n    if locale in ['zh_Hans', 'en']:\n        return tr_d.get(message, message)\n    elif locale == 'None':\n        return message\n\n\nimport numpy as np\nclass DataFrameLocale (pd.DataFrame) :  # inherit from pd.DataFrame\n    _metadata = ["df", "df_out", "locale", "d_col_trans", "d_content_trans"]        # Allows safe storage of extra attributes\n    def __init__(self, data, d_col_trans=None, d_content_trans=None, *args, **kwargs):\n        super().__init__(*args, **kwargs)                       # Pass all args & kwargs to pandas.DataFrame\n        \n        """Initialize the TranslatableDataFrame.\n        Args:\n        - data (list of dict): Raw data for DataFrame.\n        - d_col_trans (dict): Column name translations.\n        - d_content_trans (dict): Cell content translations.\n        Attributes:\n        - df:      original dataframe df\n        - df_out:  translated dataframe df\n        - locale:  locale for current df_out\n        """\n        self.df = self._constructor (data)\n        self.locale = None                                         # default\n        self.d_col_trans     = d_col_trans                         # This avoids the warning\n        self.d_content_trans = d_content_trans                     # This avoids the warning\n    \n    def set_locale (self, locale=None):\n        """Switch to a given locale, thereby changing df_out."""\n        if locale is None:\n            self.locale = None\n            self.df_out = self.df             # Reset\n        else:\n            self.locale = locale\n            self.get_df(locale)\n        \n    def get_df (self, locale=None):\n        """Return the modified or the original DataFrame."""\n        if locale is None:\n            self.locale = None\n            return self.df                                         # Return the original DataFrame\n            \n        else:\n            self.locale = locale\n            self.df_out = self.df.copy()\n            if self.d_content_trans is not None:                   # First translate content\n                self.translate_content(locale) \n            if self.d_col_trans is not None:                       # Then translate columns\n                _df_ = self.df_out.copy()\n                self.df_out = self.translate_columns(_df_, locale)                \n            return self.df_out\n \n    def translate_content(self, locale):\n        """Translate cell content to the specified language."""\n        for col in list(self.d_content_trans.keys()):\n            if col in self.df.columns:\n                self.df_out.loc[:,col] = self.df[col].map(lambda x: self.d_content_trans[col].get(x, {}).get(locale, x))\n\n    def translate_columns(self, _df_, locale):\n        """Translate column names to the specified language."""\n        columns_rename_dict = {col: self.d_col_trans.get(col, {}).get(locale, col) for col in self.df.columns}\n        return _df_.rename(columns=columns_rename_dict)\n\n\n\n\ncontent_translations = {f"t_{k}":v for k,v in Dtrans_content.items()}\ncontent_translations['Dtype_detail'] = content_translations['t_Dtype_detail']\ndfl = DataFrameLocale (df, d_content_trans = content_translations, d_col_trans=Dtrans_meta) #, d_col_trans=columns_translations)#, d_content_trans = content_translations)\ndfl.set_locale (locale) \n\n_q1_ = f"{N_('t_org01')}=='{N_('this_org01')}' and {N_('year')}>=2012" \ndf = dfl.df_out.query(_q1_) # The dataset contains only the main org01\ndf.shape, dfl.df_out.shape\n\n\n\ndef get_top_sorted (df, col, topN=25):\n    return df.groupby(col).agg({N_('weight'):"sum"}).sort_values(by=N_('weight'), ascending=False).head(topN)\n    \ndef get_opts_default (_df_, col, topN=15, debug=True):\n    if col == N_('year'):                                 ### Selector year (int) + (range)\n            _opts_ = list( _df_[col].unique().tolist() )   # .tolist() avoid extra downcasting \n            _opts_default_ = max(_opts_)-3\n    elif col==N_('t_org01'):                              ### Selector t_org02 (dict)\n            _opts_ = list( get_top_sorted(_df_, col, topN= topN).index.tolist())\n            _opts_ = {"All": None} | dict(zip(_opts_,_opts_))\n            _opts_default_ = N_('this_org01')\n    elif col==N_('t_org02'):                              ### Selector t_org02 (dict)\n        _opts_ = list( get_top_sorted(_df_, col, topN= topN).index.tolist())\n        _opts_ ={N_('All'): None} |  dict(zip(_opts_,_opts_))        ### {"All": None} |\n        _opts_default_ = None\n    elif col==N_('Dtype_detail'):                                \n        _opts_ = sorted ( list( _df_[col].unique().tolist() )   )\n        _opts_default_ = _opts_                  ### List selector: default all chosen\n    elif col==N_('method'):                                \n        _opts_ = list( _df_[col].unique().tolist() )   \n        _opts_default_ = N_('UTD_fc')\n    elif col==N_('db'):                                   ### Selector db (list)\n        _opts_ = list( _df_[col].unique() )\n        _opts_ = {"EI|WoS": None } | dict(zip(_opts_,_opts_))\n        _opts_default_ = None # "EI|WoS"\n    \n    if debug:\n        print (_opts_, _opts_default_)\n    return dict(zip(['opts','default'],[_opts_, _opts_default_]))\n\ndef construct_objects_for_UI_from_datasets (_df_in_, _df_in_2, debug = True):\n    _objects_ = dict()\n    for col in [N_('t_org01')]:\n        _objects_[col] = get_opts_default (_df_in_, col, debug=debug)\n    for col in [N_('year'), N_('db'), N_('method'), N_('t_org02'), N_('Dtype_detail')]:\n        if debug: print (f">>> {col}", end="")\n        try:\n            _objects_[col] = get_opts_default (_df_in_2, col, debug=False)\n        except Exception as e:\n            if debug: print (e, end="!")\n        if debug: print ("---")\n    \n    if debug: print ([c for c in _objects_ if c in [N_('year')]])\n    for col in [c for c in _objects_ if c in [N_('year')]]:\n        vmax, vmin = max(_objects_[col]['opts']), min(_objects_[col]['opts'])\n        _objects_[f"range_{col}"] = dict(zip(['opts','default'],[(vmin, vmax), (vmax-5, vmax-1)]))#   for App00 01 (vmax-10, vmax)\n\n    if debug: print (_q1_, _df_in_.shape[1],_df_in_2.shape[1])\n    if debug: print ( _objects_.keys() )\n    return _objects_\n\n\n\n_objects_ = construct_objects_for_UI_from_datasets (dfl.df_out, dfl.df_out, debug=False)  \n_objects_.keys()\nprint ( _objects_[N_('col_range_year')] )   # App02: 'default': (2019, 2024) \u26a0\u26a0\u26a0\u26a0\n\n\n\n\nimport param\nimport panel as pn\n\npn.extension(design='native', global_css=['.bk-header {--pn-tab-padding-x: 0.5rem;}', ':root { --pn-tab-padding-x: 0.5rem; --type-ramp-base-font-size: 13px; }'])  # ;  /* Set your desired base font size */\npn.extension('tabulator')    # tabulator\npn.extension('katex')          # markdown and LaTeX c.f. #pn.extension('mathjax')   \npn.config.throttled = True   # faster response for sliders\npn.extension(defer_load=True, loading_indicator=True) # better UX with loading indicator.. see [bound functions for better UX](https://panel.holoviz.org/how_to/best_practices/user_experience.html)\n\nDarkTheme    = pn.theme.base.DarkTheme\nDefaultTheme = pn.theme.base.DefaultTheme\n\npn.config.global_css\n\ndebug=True\n\nif _this_app_N_ ==0:\n    DashboardTitle = N_(f'DashboardTitle{_this_app_N_:02d}') .format(N_('this_org01'))    #       <===================== this_org01 required\nelse:\n    DashboardTitle = N_('this_org01')+N_('DashboardTitleShort')+N_(f'DashboardTitle{_this_app_N_:02d}') \n\n    \ntemplate_param= dict(\n    base_url =init_URL['url_specs']['base_url'],   #   <===================== this_org01 required\n    site_url =init_URL['url_specs']['site_url'],\n    logo =    init_URL['url_specs']['logo'],\n    favicon = init_URL['url_specs']['favicon'],\n    title = DashboardTitle,\n    main_max_width= "1280px",\n    row_height = 120,\n    theme_toggle= True,\n    sidebar_width = 380,\n    sidebar_footer = f"""<fast-breadcrumb><fast-breadcrumb-item href="https://oxon8.netlify.app">\xa9 2025 Oxford Roadmapping </fast-breadcrumb-item><fast-breadcrumb-item href="https://creativecommons.org/licenses/by-nc-nd/4.0">CC BY NC ND 4.0</fast-breadcrumb-item>\n    <fast-breadcrumb-item href="{N_('url_visNetZero')}">visNetZero</fast-breadcrumb-item><fast-breadcrumb-item href="{N_('url_visCEADs')}">visCEADs</fast-breadcrumb-item></fast-breadcrumb>""",\n    header_color="#002147",      # Oxford blue color https://www.colorxs.com/palette/hex/002147-a3ced9-dae5f2\n    header_background="#e2effe", # https://icolorpalette.com/color/oxford-blue\n    accent_base_color="#0066dc", # https://panel.holoviz.org/reference/templates/FastGridTemplate.html\n    header_neutral_color = "#3f98ff",\n    meta_description = DashboardTitle + " by Oxford Roadmapping",\n    meta_keywords = "Bibliometrics; Ranking; Nangfang College Guangzhou; academic performance; impact factor; impact assessment; impact evaluation; \u6587\u732e\u8ba1\u91cf\u5b66\uff1b\u6392\u540d\uff1b\u5e7f\u5dde\u5357\u65b9\u5b66\u9662\uff1b\u5b66\u672f\u8868\u73b0\uff1b\u5f71\u54cd\u56e0\u5b50\uff1b\u5f71\u54cd\u8bc4\u4f30\uff1b\u5f71\u54cd\u8bc4\u4ef7",\n    meta_author = "Han-Teng Liao \u5ed6\u6c49\u817e \u5ed6\u6f22\u9a30 ",\n)\n\nif "zh" in locale: template_param['font_url'] = 'https://fonts.font.im/css?family=Open+Sans' \n\n\n\n\ncss = """\n.alert {\n  margin: 0;\n  padding: 0.75rem 0.5rem;\n  width: calc(100%) !important;\n}\n.bk-tab {\n  padding: 0.5em 0.5em;\n  font-size: 1.25em;\n}\n.bk-tab.bk-active {\n  padding: 0.5em 0.5em;\n  font-size: 1.6em;\n  color: var(--accent-foreground-focus);\n  background-color: var(--active-bg);\n  border-color: var(--primary-bg-color);\n  text-shadow: 1px 1px 12px #fff, -1px -1px 12px #fff, 1px 5px 5px #fff, 1px -5px 5px #fff;\n}\n.card-header {\n  border-radius: calc(var(--border-radius) * 3) !important;\n}\n.card {\n  border-radius: calc(var(--border-radius) * 3)  !important;\n  border: 1px solid var(--warning-bg-color);\n  box-shadow: 5px 8px 8px var(--panel-shadow-color);\n  margin-bottom: 1.25em;\n}\n.alert{\n  width: width: calc(100%);\n  font-size: 1.25em;\n  line-height: 120%;\n  border: 1px solid transparent;\n  border-radius: var(--border-radius);\n}\nfast-card {\n    padding: 0.5em 0.5em !important;\n}\n"""\npn.extension(raw_css=[css])\n\n\nstylesheet = f"""\n:host(.alert) {{\n  color: {pn.template.FastGridTemplate.accent_base_color};\n}}\n"""\nprint (stylesheet)\n\npn_card_custom_style = {\n    'border': '1px solid var(--warning-bg-color)',\n}\n\npn_card_custom_style ['border'] = '1px solid var(--info-bg-color)'\npn_card_custom_style_i = pn_card_custom_style.copy()\npn_card_custom_style ['border'] = '1px solid var(--warning-bg-color)'\npn_card_custom_style_w = pn_card_custom_style.copy()\npn_card_custom_style ['border'] = '1px solid var(--danger-bg-color)'\npn_card_custom_style_d = pn_card_custom_style.copy() \npn_card_custom_style ['border'] = '1px solid var(--secondary-bg-color)'\npn_card_custom_style_s = pn_card_custom_style.copy() \n\n\napp_icon_html = """<svg class="icon_app" x="0px" y="0px" width="24px" viewBox="-25 0 150 100" style="enable-background:new 0 0 122.88 98.53" xml:space="preserve"><style type="text/css">.st0{{fill-rule:evenodd;clip-rule:evenodd;}}</style><g><path class="st0" d="M7.55,16.44L7.2,39.99v49.32c0,0.58,0.23,1.09,0.61,1.48c0.39,0.39,0.9,0.61,1.48,0.61h86.12 c0.58,0,1.09-0.23,1.48-0.61c0.39-0.39,0.61-0.9,0.61-1.48l6.89,0.01v1.65c0,4.16-3.4,7.55-7.55,7.55H7.55 C3.4,98.53,0,95.13,0,90.97V23.99C0,19.84,3.4,16.44,7.55,16.44L7.55,16.44z M26.04,0h89.29c4.16,0,7.55,3.4,7.55,7.55v66.98 c0,4.15-3.4,7.55-7.55,7.55H26.04c-4.15,0-7.55-3.4-7.55-7.55V7.55C18.48,3.4,21.88,0,26.04,0L26.04,0z M116.02,23.55H25.68v49.32 c0,0.58,0.23,1.09,0.61,1.48c0.39,0.39,0.9,0.61,1.48,0.61h86.12c0.58,0,1.09-0.23,1.48-0.61c0.39-0.39,0.61-0.9,0.61-1.48V23.55 H116.02L116.02,23.55z M108.14,8.49c2.06,0,3.73,1.67,3.73,3.73c0,2.06-1.67,3.73-3.73,3.73c-2.06,0-3.73-1.67-3.73-3.73 C104.4,10.16,106.07,8.49,108.14,8.49L108.14,8.49z M82.85,8.49c2.06,0,3.73,1.67,3.73,3.73c0,2.06-1.67,3.73-3.73,3.73 c-2.06,0-3.73-1.67-3.73-3.73C79.11,10.16,80.78,8.49,82.85,8.49L82.85,8.49z M95.49,8.49c2.06,0,3.73,1.67,3.73,3.73 c0,2.06-1.67,3.73-3.73,3.73c-2.06,0-3.73-1.67-3.73-3.73C91.76,10.16,93.43,8.49,95.49,8.49L95.49,8.49z"></path></g></svg>"""\nnav_button = '<a href="{href}" style="padding: 8px 0px; line-height: 250%; border: 2px solid var(--primary-text-color); border-radius: 5px;" target="_blank">'+app_icon_html+'{text} </a>'\nnav_button_here = '<span style="padding: 8px 0px; line-height: 250%; border: 2px solid var(--neutral-foreground-hint); border-radius: 5px;" target="_blank"> {text} </span>'\nnav_button_href  = "../App{k:02d}/App{k:02d}.html" ## nav_button_href  = "./App{k:02d}.html"\n\ndefine_tabs = { i:f'DashboardTitle{i:02}' for i in range(5)}\ndefine_tabs_title = { k:N_(v).format(N_('this_org01')) for k,v in define_tabs.items()}\nprint (define_tabs_title)\ndefine_tabs_title_short = { k: v[0:1]+ v.split(' -- ')[1].split(' ')[0] for k,v in define_tabs_title.items()}  #  k:"\U0001f3db" if k==0  # #k:v.split(' -- ')[1].split(' ')[0]                        else \ndefine_tabs_title_short = { k:v if k not in [1,3,4] else v[0:2] for k,v in define_tabs_title_short.items()}\ndefine_tabs_title_short = { k:v if k not in [0] else v[0:1]+"\ua7f7" for k,v in define_tabs_title_short.items()}\nprint (define_tabs_title_short)\nd_GUI_App_label = {int(k.replace('GUI_App','')):k for k in Dtrans.keys() if 'GUI_App' in k }\nd_GUI_App_trans = {int(k.replace('GUI_App','')):Dtrans[k] for k in Dtrans.keys() if 'GUI_App' in k }\n\n\nl_type_Alert = ['warning', 'danger', 'success', 'primary', 'info']\nl_pn_cards = []\nl_pn_cards_simple = []\n\ndef construct_pane_Alert ( text, alert_type):\n    return pn.pane.Alert ( text, alert_type=alert_type, sizing_mode='stretch_width', stylesheets=[stylesheet], align='center')  \n    \nfor k, dt in d_GUI_App_trans.items():\n    tr_m = tr_m | {k: v[locale] for k,v in dt.items()}  ##### Using particular dictionary for updating\n    AlertHighlightTitle = N_('AlertHighlightTitle', tr_d=tr_m).format(N_('this_org01'))\n    text_Alert_this =  ( \n        f"{N_('AlertHighlight', tr_d=tr_m)} \\n"\n        f"{N_('AlertBulletPoints', tr_d=tr_m)}\\n"\n    )\n    if k == _this_app_N_:\n        text_Alert_this =  nav_button_here.format(text=f'App{k:02d}') + text_Alert_this \n    else:\n        text_Alert_this =  nav_button.format(text=f'App{k:02d}', href=nav_button_href.format(k=k)) + text_Alert_this \n    l_pn_cards.append ( construct_pane_Alert (f"### {AlertHighlightTitle}\\r\\n"+text_Alert_this, l_type_Alert[k]) ) \n\ntabs_content = [ (t, l_pn_cards[i]) for i,t in define_tabs_title_short.items()]\npane_tabs = pn.Tabs( *tuple( tabs_content ), sizing_mode='stretch_width', align='center')\npane_tabs.active = _this_app_N_\n\npane_tabs\n\npane_tabs.tags = l_type_Alert\npane_tabs.tags\n\ndir(pane_tabs.objects[0])\n\npane_tabs\n\n\n\n\n\ndef generate_md_ref ( rec_matched, templ_md_ref = "* {Author} ({year}). '{title}', ***{source}***. doi:[{doi}](http://doi.org/{doi})"):\n    """ ### Do not translate here!!""" \n    l_md=[]\n    rec_matched = rec_matched\n    for i, row in rec_matched.iterrows():\n        _md_text_ = templ_md_ref.format( **row )\n        l_md.append (_md_text_)\n    return "\\n".join ( l_md )\n\ndef generate_refs (df, df_en, sliced_Authors):   # param.reactive.rx  REVERSE: dft.rx().rx.pipe(lambda x:x)\n    """ ### References generation """\n    df = df.copy()\n    df = df.query(f"{N_('t_Author')}.isin({sliced_Authors})").drop_duplicates(subset=N_('idx'), keep="first")\n\n    lindex = list ( df[N_('idx')].values ) \n    rec_matched  = df_en[df_en['idx'].isin (lindex) ].drop_duplicates(subset='idx') # No translation here\n    return rec_matched.sort_values(by=['year','Dtype_detail'], ascending=[False,True])  # No translation here  \n \n\n\npane_Ref = pn.Card (N_('Author(s)') , N_('AuthorPrompt'), title = f"{N_('References')}" )\npane_Ref.objects # [Markdown(str), Markdown(str)]\n\n\ndef dataframe_grp_sum_sorted (df, grpby=[N_('t_org02'),N_('year')], pagg={N_('weight'):'sum', N_('idx'):'nunique'}, ps_v= dict(by=N_('weight'), ascending=False),):\n    return df.groupby(grpby).agg(pagg).sort_values(**ps_v).reset_index()\ndef get_stats_Author  (df_cw, TopN=None):\n    return dataframe_grp_sum_sorted (df_cw, grpby=N_('t_Author'), ps_v= dict(by=[N_('weight')], ascending=[False]) )\ndef get_stats_Author_source  (df_cw, TopN=None):\n    d = dataframe_grp_sum_sorted (df_cw, grpby=[N_('t_Author'), N_('source')], ps_v= dict(by=[N_('weight'),N_('idx')], ascending=[False,False]) )\n    if TopN is None: return d\n    else: return d.head(TopN)\ndef get_stats_org02_Author  (df_cw, TopN=None):\n    d = dataframe_grp_sum_sorted (df_cw, grpby=[N_('t_org02'),N_('t_Author')], ps_v= dict(by=[N_('weight'),N_('idx')], ascending=[False,False]) )\n    if TopN is None: return d\n    else: return d.head(TopN)\n\n\n\n\nfrom bokeh.models.widgets.tables import NumberFormatter\nbokeh_formatters = {\n    N_('weight'): NumberFormatter(format='0.00'),\n}\ndef stats_style_format(df, w_vmax=60, i_vmax=120):\n    dfs = df.style.format('{:.2f}', na_rep="",precision=2, subset=[N_('idx'), N_('weight')])\\\n      .set_properties(**{ 'color': 'yellow', 'font-weight': 'bold', 'text-shadow': '1px 1px 7px #000, -1px -1px 7px #000, 1px -1px 2px #000, 1px -1px 2px #000;'}, subset=[N_('weight'),N_('idx')])\\\n      .bar(align="left", vmin=0, vmax=w_vmax, cmap="Reds", height=75, width=80, props="width: 100px; border-right: 1px solid black;", subset=[N_('weight')])\\\n      .bar(align="left", vmin=0, vmax=i_vmax, cmap="Blues", height=75, width=80, props="width: 100px; border-right: 1px solid black;", subset=[N_('idx')])\n    if N_('source') in df.columns:\n        return dfs.set_properties(**{ 'width': '240px'}, subset=[N_('source')])\n    else:\n        return dfs\ndef tab_stats_default (sdf, editors={}, text_align="left", show_index=False, pagination='local', page_size=10, width=360, formatters=bokeh_formatters, **kwargs):\n    return pn.widgets.Tabulator ( sdf, editors=editors, text_align=text_align, show_index=show_index, pagination=pagination, page_size=page_size, width=width,formatters=formatters, **kwargs)\n    \ndef tab_w_style_auto_max (func, df_cw, sorters=[{'field': N_('weight'), 'dir': 'desc'}], col_vars = [N_('weight'),N_('idx')], width=360, **kwargs):\n    stats = func (df_cw)\n    col_vars_max = stats[col_vars].max().to_dict()\n    return tab_stats_default ( stats_style_format (stats, w_vmax=col_vars_max[col_vars[0]], i_vmax=col_vars_max[col_vars[1]]), width=width, **kwargs)\n\n\n\n_objects_[N_('col_range_year')]['opts'], _objects_[N_('col_range_year')]['default']\n\n\nfrom panel.template import DarkTheme, DefaultTheme\npn.config.theme = 'default'\nfrom panel.viewable import Viewer\npn.extension (sizing_mode="stretch_width")               # FastGrid \npn.extension( defer_load=False, loading_indicator=False) # , loading_indicator=True\nfrom io import StringIO      # For "saving" button function\nimport copy\n\n\nclass GUI (Viewer): # panel.viewable class  --> param.parameterized.ParameterizedMetaclass\n    status_interact = param.Boolean(default=True)\n    dashboard_trigger = param.Number(1)\n\n    sel_org02      = param.Selector ( objects = _objects_[N_('t_org02')]['opts'], default=_objects_[N_('t_org02')]['default'] )\n    sel_range_year = param.Range    ( bounds  = _objects_[N_('col_range_year')]['opts'], default = _objects_[N_('col_range_year')]['default'],  step=1)\n    sel_method     = param.Selector ( objects = _objects_[N_('method')]['opts'],  default=_objects_[N_('method')]['default']     )\n    sel_db         = param.Selector ( objects = _objects_[N_('db')]['opts'],      default=_objects_[N_('db')]['default']    )\n    sel_Dtype_det  = param.ListSelector ( objects = _objects_[N_('Dtype_detail')]['opts'],      default=_objects_[N_('Dtype_detail')]['default']    )\n    \n    filter_tab    = param.Parameter()\n    sliced_Authors= param.Parameter()    # \u267b\ufe0f--> (App02) # \n    \n    def __init__(self, dfl, use_template, **params):   # dfl <=== Multilingual DataFrameLocale object\n        """ Initiate Non-External Objects """\n        self.dfl = dfl\n        self.use_template=use_template\n        super().__init__(**params)\n        self.df    = self.dfl.df_out\n        self.df_en = self.dfl.df\n        \n        cols_shown = [N_('method'),N_('db'),N_('Dtype_detail'),N_('year'),N_('weight'),N_('idx'),N_('t_Author'),N_('t_org02'),N_('source')]   ## Data field selection and pre-ordering\n        self.df = self.df[cols_shown].sort_values(by=[N_('year'), N_('Dtype_detail'), N_('method')], ascending=[False,True,True])\n        self.w_sel_org02  = pn.widgets.Select.from_param(self.param.sel_org02, name=N_('SelectOrg02'), value = None, sizing_mode='stretch_width')         \n        self.w_range_year = pn.widgets.IntRangeSlider.from_param(self.param.sel_range_year, name=N_('SelectYearRange'), sizing_mode='stretch_width')         \n        self.w_method     = pn.widgets.RadioButtonGroup.from_param(self.param.sel_method, button_type ='success', button_style ='outline', sizing_mode='stretch_width')\n        self.w_db         = pn.widgets.RadioButtonGroup.from_param(self.param.sel_db, button_type ='warning', value = None, button_style ='outline', sizing_mode='stretch_width')  ### value meaning  EI|WoS\n        self.w_Dtype_det  = pn.widgets.CheckBoxGroup.from_param(self.param.sel_Dtype_det,  name=N_('SelectDtypeScope'), inline=True)\n        self.w_save    = pn.widgets.FileDownload( name='', label=N_('ButtonSave'), embed=False, button_type ='primary', align=('center', 'end'), width=75,\n                                                  callback=pn.bind(self.save_current_view), filename=N_('ButtonSave')+".csv") \n        self.w_refresh = pn.widgets.Button(name=N_('ButtonRefresh'), button_type ='warning', align=('start', 'end'), width=85)  # 360-180 = 180, 180/2=80\n        self.w_refresh.on_click(self.update_current_view)\n\n        self.init_tabulators()       # \u23ec TAB: self.filter_tab self.filter_tab_wider self.filter_tab_narrower\n        self.get_stats_external()                      # <-------------------- \U0001f387  data (init) and update once   self.l_org02\n\n\n        self.pane_tabs = pane_tabs \n        self.pane_Ref = pn.Card (N_('Author(s)') , N_('AuthorPrompt'), title = f"{N_('References')}",  styles=pn_card_custom_style_d ) # \u267b\ufe0f--> (App02) # \n        self.init_widgetbox()\n        \n        self.sliced_Authors = []  # initiation      self.row_data = []    \n        periodic_cb = pn.state.add_periodic_callback(self.event_selection_change, 250) # check_event_selection_change\n        \n    def update_tab_df_attempt(self, _obj_, df):\n        try: _obj_.value = df\n        except Exception as e: print (e)\n    def get_stats_external (self):\n        self.update_tab_df_attempt (self.tab_stats_Author,      get_stats_Author (self.filter_tab_wider.current_view) )\n        self.update_tab_df_attempt (self.tab_stats_org02_Author,get_stats_org02_Author (self.filter_tab_wider.current_view) )\n        self.update_tab_df_attempt (self.tab_stats_Author_sel,      get_stats_Author (self.filter_tab.current_view) )\n        self.update_tab_df_attempt (self.tab_stats_org02_Author_sel,get_stats_org02_Author (self.filter_tab.current_view) )\n        self.update_tab_df_attempt (self.ts_Author_source ,get_stats_Author_source (self.filter_tab.current_view) )\n                \n    @pn.depends ('status_interact', watch=True)\n    def disable_sidebar_wb(self):\n        self.pn_sidebar_wb.disabled = not self.status_interact\n    \n    \n    @pn.depends ('sel_org02', 'sel_range_year','sel_method', 'sel_db', 'sel_Dtype_det', watch=True) # \n    def update_current_view (self, event=None): # event=None clickable\n        self.filter_tab._update_cds()                              ##### Wait for the tabulator content updated\n        try:\n            self.status_interact, self.main1.loading = False, True\n            self.tab_stats_Author_sel.selection = []               # \u267b\ufe0f--> (App02) # #self.row_data = [] # initiation\n            self.get_stats_external()                      # <-------------------- \U0001f387  data (init) and update once \n            self.dashboard_trigger = self.dashboard_trigger + 1\n        except Exception as e:   print (f">>> {e}")\n        finally:                 self.status_interact, self.main1.loading = True, False\n\n    def event_selection_change(self): \n        """ selectable """\n        tab = self.tab_stats_Author_sel\n        try: ## Get Selection from tab selectable            \n            self.sliced_Authors = tab.current_view.iloc[tab.selection].loc[:,N_('t_Author')].tolist()\n        except:\n            self.sliced_Authors = []\n        if len (self.sliced_Authors)>0:\n            self.ts_Author_org02._update_cds()  \n            self.ts_Author_source._update_cds()  \n            self.pane_Ref.objects[0].object = N_('Author(s)') + ", ".join(self.sliced_Authors)                        ##### N_('Author(s)') \n            self.rec_matched = generate_refs (self.filter_tab.current_view, self.df_en, self.sliced_Authors)          ##### N_('AuthorPrompt')-----References Markdown Content----- EXTERNAL functions ####\n            self.pane_Ref.objects[1].object = generate_md_ref ( self.rec_matched )                              #####             # \u23ec translate back to English!\n        else:\n            self.pane_Ref.objects[0].object = N_('Author(s)') # Initital values\n            self.pane_Ref.objects[1].object = N_('AuthorPrompt')\n    \n    def init_widgetbox (self):     # \u267b\ufe0f--> (App01 App00) #   self.w_window_year,  \n        self.pn_Method_db  = pn.Column ( pn.widgets.StaticText(name=N_('SelectMethodDBScope'), value=N_('SelectMethodDBScopeBrief')), self.w_db, self.w_method, \n                                         pn.widgets.StaticText (name=N_('Footnote'), value=N_('SelectMethodDBScopeNote')) )\n        self.pn_Dtype = pn.Column ( pn.widgets.StaticText(name=N_('SelectDtypeScope'), value=N_('SelectDtypeScopeBrief')), self.w_Dtype_det)        \n        self.pn_sidebar_wb = pn.WidgetBox (self.w_sel_org02, pn.layout.Divider(), self.w_range_year, pn.layout.Divider(), \n                                           self.pn_Method_db, pn.layout.Divider(), pn.Row(self.pn_Dtype), pn.layout.Divider(), pn.Row(self.w_save, self.w_refresh))\n\n    def init_tabulators (self):              \n        """Tabulator self.filter_tab: Main Contributing Authors and Organzations"""\n        self.filter_tab_wider    = pn.widgets.Tabulator(self.df, show_index=False, pagination='local', page_size=10)\n        self.filter_tab_wider.add_filter(self.param.sel_method,   N_('method') )    # add dynamic filter\n        self.filter_tab_wider.add_filter(self.param.sel_db,       N_('db') )        # add dynamic filter\n        self.filter_tab_wider.add_filter(self.param.sel_Dtype_det,N_('Dtype_detail')  )        # add dynamic filter\n\n        self.filter_tab          = pn.widgets.Tabulator(self.df, show_index=False, pagination='local', page_size=10)\n        self.filter_tab.add_filter(self.param.sel_method,   N_('method') )                  # add dynamic filter\n        self.filter_tab.add_filter(self.param.sel_db,       N_('db') )                      # add dynamic filter\n        self.filter_tab.add_filter(self.param.sel_Dtype_det,N_('Dtype_detail')  )           # add dynamic filter\n        self.filter_tab.add_filter(self.param.sel_org02,    N_('t_org02') )                 # \u2795 add_filter org02 add dynamic filter\n        self.filter_tab.add_filter(self.w_range_year.param.value_throttled,    N_('year'))  # \u2795 add dynamic filter <======================\n\n\n        head_filters = {\n            N_('t_Author'): {'type': 'input', 'func': 'like' },\n            N_('t_org02'):  {'type': 'list',  'func': 'in', 'valuesLookup': True, 'multiselect': True},\n            N_('weight'):   {'type': 'number', 'func': '>=', 'placeholder': N_('EnterMinimumValue')},\n            N_('idx'):   {'type': 'number', 'func': '>=', 'placeholder': N_('EnterMinimumValue')},\n        }   \n        """Tabulator stats_Author: Main Contributing Authors"""\n        self.tab_stats_Author = tab_w_style_auto_max(get_stats_Author, self.filter_tab_wider.current_view,\n                                                    header_filters=head_filters )                                              # (1,1) """App02-All: Tabulator stats_Author: Main Contributing Authors""" \n        self.tab_stats_org02_Author = tab_w_style_auto_max(get_stats_org02_Author, self.filter_tab_wider.current_view, \n                         header_filters=head_filters, sorters=[{'field': N_('weight'), 'dir': 'desc'}], width=560)             # (1,2) """App02-All: Tabulator tab_stats_org02_authors"""\n        self.tab_stats_Author_sel = tab_w_style_auto_max(get_stats_Author, self.filter_tab.current_view, selectable='checkbox')# (2,1) """App02-Org02-selected: Tabulator stats_Author: Main Contributing Authors""" \n        self.tab_stats_org02_Author_sel = tab_w_style_auto_max(get_stats_org02_Author, self.filter_tab.current_view, \n                                                      sorters=[{'field': N_('weight'), 'dir': 'desc'}], width=560)             # (2,2) ""App02-Org02-selected: Tabulator tab_stats_org02_authors"""\n        """Tabulator stats_org02: Main Contributing Organzations org02"""\n        self.ts_Author_org02            = tab_w_style_auto_max(get_stats_org02_Author, self.filter_tab.current_view, \n                                                      sorters=[{'field': N_('weight'), 'dir': 'desc'}], width=560)             # (3,1) \n        self.ts_Author_org02.add_filter( self.param.sliced_Authors, N_('t_Author'))                                   \n        self.ts_Author_source           = tab_w_style_auto_max(get_stats_Author_source, self.filter_tab.current_view,  \n                                                      sorters=[{'field': N_('weight'), 'dir': 'desc'}], width=560)             # (3,2) \n        self.ts_Author_source.add_filter( self.param.sliced_Authors, N_('t_Author'))\n        \n    def init_gauges (self):             \n        d_dauge = self.bdgauge()  # using  pn.bind ( get_max_and_latest, self.param.stats_rolling)\n        self.GaugeA = CustomGauge(p_name=d_dauge["max"][N_('year')],    p_value=d_dauge["max"][N_("indicator")])\n        self.GaugeB = CustomGauge(p_name=d_dauge["latest"][N_('year')], p_value=d_dauge["latest"][N_("indicator")])\n        self.pane_gauges = pn.Row ( self.GaugeA, self.GaugeB )  # initiate\n    def update_gauges (self, d_dauge):\n        self.GaugeA.update(p_name=d_dauge["max"][N_('year')],    p_value=d_dauge["max"][N_("indicator")])\n        self.GaugeB.update(p_name=d_dauge["latest"][N_('year')], p_value=d_dauge["latest"][N_("indicator")]) \n        self.pane_gauges = pn.Row ( self.GaugeA, self.GaugeB )  \n    def get_pane_debug (self):  # get_records_N here\n        return pn.pane.Markdown(f"* N = {self.filter_tab.current_view.shape[0]}\\n* N (idx) = {self.filter_tab.current_view[N_('idx')].nunique()}\\n  ")\n    def save_current_view (self, event=None): # event=None clickable\n        self.df_this =  self.filter_tab.current_view        \n        sio = StringIO()\n        self.df_this.to_csv(sio, encoding='utf8')\n        sio.seek(0)\n        return sio\n    \n    def __panel__(self):\n        """ Panel composition, layout and status """    # \u267b\ufe0f--> (App02) # self.pane_Ref, for self.pn_sidebar\n        self.pn_sidebar = pn.Column ( pn.Card( self.pane_tabs, title=N_('Menu'), styles=pn_card_custom_style_i ), \n                                      pn.Card( self.pn_sidebar_wb, title=N_('WidgetBox'), styles=pn_card_custom_style_w ),                self.pane_Ref,        \n                                      pn.Card( self.get_pane_debug, title=N_('PaneDebug'), styles=pn_card_custom_style_s ),                width=360 ) # width=370 \n\n        self.main0 = pn.Column ( f"## {N_('Stats_All_years')}", pn.Row ( self.tab_stats_Author, self.tab_stats_org02_Author ),           width=880 )\n        self.main1 = pn.Column ( f"## {N_('Stats_Sel')}",       pn.Row ( self.tab_stats_Author_sel, self.tab_stats_org02_Author_sel) ,   width=880 )\n        self.main2 = pn.Column ( f"## {N_('Stats_Sel_Author_Sources')}", pn.Row ( self.ts_Author_org02, self.ts_Author_source) ,         width=880 ) \n        self.main3 = pn.Column ( f"## {N_('Data_Filtered')}",   pn.Row ( self.filter_tab ) ,         width=880 ) \n        \n        if self.use_template:\n            PNtemplate = pn.template.FastGridTemplate(theme= DefaultTheme,  sidebar = self.pn_sidebar, prevent_collision=True, **template_param) # theme= DefaultTheme  DarkTheme\n            PNtemplate.main [  :4, : ]  = self.main0\n            PNtemplate.main [ 4:8, : ]  = self.main1\n            PNtemplate.main [ 8:12, : ] = self.main2\n            PNtemplate.main [12:16, : ] = self.main3\n            return PNtemplate\n        else:\n            return pn.Row (self.pn_sidebar, pn.Column( self.main0, self.main1, self.main2, self.main3) )\n\nApp02_servable = GUI ( dfl, use_template=True )  # <-----------------------  Using locale \n\n\nApp02_servable.servable()  ### \U0001f6a8 Service Browser External\n\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()